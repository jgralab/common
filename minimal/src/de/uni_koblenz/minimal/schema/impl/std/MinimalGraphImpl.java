/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.minimal.schema.impl.std;

import de.uni_koblenz.jgralab.impl.EdgeIterable;
import de.uni_koblenz.jgralab.impl.VertexIterable;

import de.uni_koblenz.jgralab.impl.std.GraphImpl;

import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;

import de.uni_koblenz.minimal.schema.MinimalSchema;

import de.uni_koblenz.jgralab.Vertex;
import de.uni_koblenz.jgralab.greql2.evaluator.GreqlEvaluator;
import de.uni_koblenz.jgralab.greql2.jvalue.JValue;
import de.uni_koblenz.jgralab.greql2.jvalue.JValueImpl;
import de.uni_koblenz.jgralab.greql2.jvalue.JValueSet;

import java.io.IOException;
import java.util.List;

public class MinimalGraphImpl extends GraphImpl implements de.uni_koblenz.jgralab.Graph, de.uni_koblenz.minimal.schema.MinimalGraph {

	/* Constructors and create methods with values for initial vertex and edge count */
	public MinimalGraphImpl(int vMax, int eMax) {
		this(null, vMax, eMax);
	}
	
	public MinimalGraphImpl(java.lang.String id, int vMax, int eMax) {
		super(id, MinimalSchema.instance().gc_MinimalGraph, vMax, eMax);
		initializeAttributesWithDefaultValues();
	}
	
	public static de.uni_koblenz.minimal.schema.MinimalGraph create(int vMax, int eMax) {
		return (de.uni_koblenz.minimal.schema.MinimalGraph) MinimalSchema.instance().createMinimalGraph(null, vMax, eMax);
	}
	
	public static de.uni_koblenz.minimal.schema.MinimalGraph create(String id, int vMax, int eMax) {
		return (de.uni_koblenz.minimal.schema.MinimalGraph) MinimalSchema.instance().createMinimalGraph(id, vMax, eMax);
	}
	
	/* Constructors and create methods without values for initial vertex and edge count */
	public MinimalGraphImpl() {
		this(null);
	}
	
	public MinimalGraphImpl(java.lang.String id) {
		super(id, MinimalSchema.instance().gc_MinimalGraph);
		initializeAttributesWithDefaultValues();
	}
	
	public static de.uni_koblenz.minimal.schema.MinimalGraph create() {
		return (de.uni_koblenz.minimal.schema.MinimalGraph) MinimalSchema.instance().createMinimalGraph(null);
	}
	
	public static de.uni_koblenz.minimal.schema.MinimalGraph create(String id) {
		return (de.uni_koblenz.minimal.schema.MinimalGraph) MinimalSchema.instance().createMinimalGraph(id);
	}

	public final de.uni_koblenz.jgralab.schema.AttributedElementClass getAttributedElementClass() {
		return de.uni_koblenz.minimal.schema.MinimalSchema.instance().gc_MinimalGraph;
	}

	public final java.lang.Class<? extends de.uni_koblenz.jgralab.AttributedElement> getM1Class() {
		return de.uni_koblenz.minimal.schema.MinimalGraph.class;
	}

	public Object getAttribute(String attributeName) throws NoSuchFieldException {
		throw new NoSuchFieldException("MinimalGraph doesn't contain an attribute " + attributeName);
	}

	public void setAttribute(String attributeName, Object data) throws NoSuchFieldException {
		throw new NoSuchFieldException("MinimalGraph doesn't contain an attribute " + attributeName);
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException, NoSuchFieldException {
		throw new NoSuchFieldException("MinimalGraph doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException, NoSuchFieldException {
		throw new NoSuchFieldException("MinimalGraph doesn't contain an attribute " + attributeName);
	}
	
private GreqlEvaluator greqlEvaluator = null;

	@SuppressWarnings("unchecked") 
	@Override 
	public synchronized <T extends Vertex> List<T> reachableVertices(Vertex startVertex, String pathDescription, Class<T> vertexType) { 
		if (greqlEvaluator == null) { 
			greqlEvaluator = new GreqlEvaluator((String) null, this, null); 
		} 
		greqlEvaluator.setVariable("v", new JValueImpl(startVertex)); 
		greqlEvaluator.setQuery("using v: v " + pathDescription); 
		greqlEvaluator.startEvaluation(); 
		JValueSet rs = greqlEvaluator.getEvaluationResult().toJValueSet(); 
		java.util.List<T> lst = new java.util.LinkedList<T>(); 
		for (JValue jv : rs) { 
			lst.add((T) jv.toVertex()); 
			}
		return lst; 
	}

	// ------------------------ Code for Link ------------------------

	public de.uni_koblenz.minimal.schema.Link getFirstLinkInGraph() {
		return (de.uni_koblenz.minimal.schema.Link)getFirstEdgeOfClassInGraph(MinimalSchema.instance().ec_Link);
	}

	public de.uni_koblenz.minimal.schema.Link createLink(de.uni_koblenz.minimal.schema.Node alpha, de.uni_koblenz.minimal.schema.Node omega) {
		de.uni_koblenz.minimal.schema.Link newEdge = (de.uni_koblenz.minimal.schema.Link) graphFactory.createEdge(de.uni_koblenz.minimal.schema.Link.class, 0, this, alpha, omega);
		return newEdge;
	}

	public de.uni_koblenz.minimal.schema.Link createLink(int id, de.uni_koblenz.minimal.schema.Node alpha, de.uni_koblenz.minimal.schema.Node omega) {
		de.uni_koblenz.minimal.schema.Link newEdge = (de.uni_koblenz.minimal.schema.Link) graphFactory.createEdge(de.uni_koblenz.minimal.schema.Link.class, id, this, alpha, omega);
		return newEdge;
	}

	// ------------------------ Code for Node ------------------------

	public de.uni_koblenz.minimal.schema.Node getFirstNode() {
		return (de.uni_koblenz.minimal.schema.Node)getFirstVertexOfClass(MinimalSchema.instance().vc_Node);
	}

	public de.uni_koblenz.minimal.schema.Node createNode() {
		de.uni_koblenz.minimal.schema.Node newVertex = (de.uni_koblenz.minimal.schema.Node) graphFactory.createVertex(de.uni_koblenz.minimal.schema.Node.class, 0, this);
		return newVertex;
	}

	public de.uni_koblenz.minimal.schema.Node createNode(int id) {
		de.uni_koblenz.minimal.schema.Node newVertex = (de.uni_koblenz.minimal.schema.Node) graphFactory.createVertex(de.uni_koblenz.minimal.schema.Node.class, id, this);
		return newVertex;
	}

	public Iterable<de.uni_koblenz.minimal.schema.Link> getLinkEdges() {
		return new EdgeIterable<de.uni_koblenz.minimal.schema.Link>(this, de.uni_koblenz.minimal.schema.Link.class);
	}
	

	public Iterable<de.uni_koblenz.minimal.schema.Node> getNodeVertices() {
		return new VertexIterable<de.uni_koblenz.minimal.schema.Node>(this, de.uni_koblenz.minimal.schema.Node.class);
	}
	
}
